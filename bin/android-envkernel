#!/usr/bin/env bash
((return 0 2>/dev/null) || [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]) || {
  echo "Please load the file instead."
  echo "example: source ./path/to/android-envkernel"
  exit 1
}

# set current directory as kernel dir
export KERNEL_DIR=$(pwd)
export BUILD_DIR=$KERNEL_DIR/out

[[ -f "$KERNEL_DIR/../prebuilts/.env" ]] && DOTENV="../prebuilts/.env"
[[ -f "$KERNEL_DIR/../.env" ]] && DOTENV="$KERNEL_DIR/../.env"
[[ -f "$KERNEL_DIR/.env" ]] && DOTENV="$KERNEL_DIR/.env"
[[ -z "$DOTENV" ]] && { echo "no dotenv available. exiting"; exit 1; }

source $DOTENV

# set ccache and clang path
# you should set ANDROID_CLANG_HOME with your path of clang before using it
export PATH="/usr/lib/ccache/bin/:$ANDROID_CLANG_HOME/bin:$PATH"
# also insert the clang's libs for additional shared library usage (e.g LTO)
export LD_LIBRARY_PATH="$ANDROID_CLANG_HOME/lib64:$LD_LIBRARY_PATH"
# remove unused links on clang's version from aosp-clang
export KBUILD_COMPILER_STRING=$(clang -v |& sed -e '1!d;s/ (http.\+)//g')

if [[ -z "$OLDPROMPT" ]]; then
  export OLDPROMPT="$PS1"
  export PS1="(dev) $OLDPROMPT"
fi

mke(){
  mkdir -p $BUILD_DIR
  if [[ -z "$kversion" ]]; then
    kversion=$(git rev-list --tags --max-count=1 | xargs git describe --tags)
  fi
  echo "envsetup: Building Version $kversion."
  echo "-$kversion" > {$KERNEL_DIR,$BUILD_DIR}/.scmversion

  make -j$(nproc --ignore=1) \
    -C $KERNEL_DIR \
    O=$BUILD_DIR \
    ARCH=arm64 \
    CROSS_COMPILE=aarch64-linux-gnu- \
    CC=clang CLANG_TRIPLE=aarch64-linux-gnu- $@ |& tee ../mke.log
  
  test -z "$@" && mke_dtimg
}

mke_dtimg(){
  DTOUT=$BUILD_DIR/dtbo.img
  MKDT=$(which mkdtboimg.py)

  if [[ -n "$MKDT" ]];then
    echo "Building overlay dt using $MKDT"
    python2 $MKDT \
      create $DTOUT \
      $(find $BUILD_DIR/arch/arm64/boot/dts/ -iname '*-overlay.dtbo' -print)
    echo "Build done: $DTOUT"
  fi
}

cherry-am(){
  co=cherry.patch
  uri=$(echo $1|cut -d\# -f1)
  curl -o $co $uri.patch && git am < $co && rm $co
}

env-info(){
  echo "DotEnv : $DOTENV"
  echo "Target Kernel : $KERNEL_DIR"
  echo "Output : $BUILD_DIR"
  echo "Compiler: $KBUILD_COMPILER_STRING"
  echo "Kernel Version: $kversion"
}

exit(){
  export PS1="$OLDPROMPT"
  unset KBUILD_COMPILER_STRING OLDPROMPT
  unset -f mke mke_dtimg cherry-am env-info exit
}

clear
env-info